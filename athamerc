" WARNING: By default /etc/athamerc will get rewritten on updates. You should
" create a ~/.athamerc that sources this file and make changes there.
"
" /etc/athamerc is only read if no ~/.athamerc is found
"
" If you don't want /etc/athamerc overidden, supply the --norc flag to the setup
" script.

set nocompatible

set ttimeoutlen=10 "Otherwise, you have to wait for the escape key.

set backspace-=eol   "For more traditional shell behavior
set backspace+=start "Without this, you can't delete shell completions

set textwidth=0 "Don't try to wrap text

"Start each line in insert mode. Most shell vi-modes do this:
autocmd User Vimbed_StartLine call feedkeys("\<C-\>\<C-N>i","n")

" These make arrows more shell like. Feel free to comment them out:
if v:version>=800 || has("patch928")
  " These maps can segfault in earlier vim versions.
  inoremap <Up> <Up><ESC>A
  inoremap <Down> <Down><ESC>A
endif

" Uncomment this to change the cursor depending on mode:
" (Only works in some terminals/OSs)
" Note that vim is run in a forkpty so normal :!tty won't give you the right tty to use here
"
    "let g:tty='/dev/'.system('ps -o tty= $(ps -o ppid= $(ps -o ppid= $$))')
    "au InsertLeave * silent execute "!printf '[2 q' > ".g:tty
    "au VimLeave * silent execute "!printf '[2 q' > ".g:tty
    "au InsertEnter * call InsertModeCursor()
    "function! InsertModeCursor()
    "  if v:insertmode == "i"
    "    " Insert mode
    "    silent execute "!printf '[6 q' > ".g:tty
    "  else
    "    " Replace mode
    "    silent execute "!printf '[4 q' > ".g:tty
    "  endif
    "endfunction


" Uncomment these maps to have the up and down arrow
" only match lines that share text before cursor
" (Similar to how arrows work for vim ex expressions)
"
    ""VimEnter is here to fight other plugins that try to remap arrows
    ""Vimbed_SuppressCmdline stops Athame from showing the command
    "autocmd VimEnter * inoremap <silent> <expr> <Up> Vimbed_SuppressCmdline("<C-\><C-O>:silent call HistorySearchBackward()<CR>")
    "autocmd VimEnter * inoremap <silent> <expr> <Down> Vimbed_SuppressCmdline("<C-\><C-O>:silent call HistorySearchForward()<CR>")
    "autocmd VimEnter * nnoremap <silent> <expr> <Up> Vimbed_SuppressCmdline(":silent call HistorySearchBackward()<CR>")
    "autocmd VimEnter * nnoremap <silent> <expr> <Down> Vimbed_SuppressCmdline(":silent call HistorySearchForward()<CR>")


"Similar to bash's history-search-backward.
function! HistorySearchBackward()
  let curcol = col('.')
  if curcol > 1
    let searchText = getline('.')[0:curcol - 2]
    for line in range(line('.') - 1, 1, -1)
      if getline(line)[0:curcol - 2] == searchText
        call cursor(line, curcol)
        break
      endif
    endfor
  elseif line('.') > 1
    call cursor(line('.') - 1, 1)
  endif
endfunction

"Similar to bash's history-search-forward.
function! HistorySearchForward()
  let curcol = col('.')
  if curcol > 1
    let searchText = getline('.')[0:curcol - 2]
    for line in range(line('.') + 1, line('$'))
      if getline(line)[0:curcol - 2] == searchText
        call cursor(line, curcol)
        break
      endif
    endfor
  else
    call cursor(line('.') + 1, 1)
  endif
endfunction

" vim: set ft=vim:
